spryk: wrapper
description: "Adds CRUD code for a Domain Entity."
priority: 1
mode: both
level: 2

arguments:
    organization:
        inherit: true
        default: Spryker

    module:
        inherit: true

    domainEntity: ~

excludedSpryks:
    - AddZedPresentationTwig
    - AddZedNavigationNode

preSpryks:
    - AddModule

postSpryks:
    - AddZedDomainEntityDeleter
    - AddZedDomainEntityCreator
    - AddZedDomainEntityReader
    - AddZedDomainEntityUpdater
    - AddDomainEntityValidator
    # Add transfers
    - AddSharedDomainEntityFetchingTransferDefinition
    - AddSharedDomainEntityManipulationTransferDefinition
    - AddDomainEntityValidator:
          arguments:
              type:
                  value: "Create"
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "get{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/GetCollectionMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "apply{{ domainEntity }}Filters"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyFiltersMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "has{{ domainEntity }}"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "bool"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/HasMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "get{{ domainEntity }}DeleteCollection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/GetDeleteCollectionMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "apply{{ domainEntity }}DeleteFilters"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyDeleteFiltersMethod.php.twig
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "get{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Reader()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "create{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Creator()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "update{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Updater()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "delete{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Deleter()->delete{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer);"
    # Add add{{ domainEntity }}CreatePreSavePlugins, get{{ domainEntity }}CreatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSavePluginInterface[]"

    # Add add{{ domainEntity }}CreatePostSavePlugins, get{{ domainEntity }}CreatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePreSavePlugins, get{{ domainEntity }}UpdatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePostSavePlugins, get{{ domainEntity }}UpdatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSavePluginInterface[]"

    # Add add{{ domainEntity }}ExpanderPlugins, get{{ domainEntity }}ExpanderPlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}Expander"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Expander\\{{ domainEntity }}ExpanderPluginInterface[]"

    # Add add{{ domainEntity }}UpdateValidatorRulePlugins, get{{ domainEntity }}UpdateValidatorRulePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdateValidatorRule"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"

    # Add add{{ domainEntity }}CreateValidatorRulePlugins, get{{ domainEntity }}CreateValidatorRulePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
              arguments:
                  type:
                      value: "{{ domainEntity }}CreateValidatorRule"
                  output:
                      value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"
    # Add id_{{ domainEntity }} property to "spy_{{ module }}" entity of the Persistence layer.

    # Creates {{ domainEntity }}ExpanderPluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ExpanderPlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Expander"
              modelMethod:
                  value: "expand"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity }}Transfers"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}PreSavePluginInterface
    -   AddDomainEntityExtensionInterfaceMethod:
                arguments:
                    className:
                        value: "{{ domainEntity }}PreSavePlugin"
                    subDirectory:
                        value: "{{ domainEntity }}/Saver"
                    modelMethod:
                        value: "process"
                    input:
                        value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity }}Transfers"
                    output:
                        value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}PostSavePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}PostSavePlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Saver"
              modelMethod:
                  value: "process"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity }}Transfers"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}ValidatorRulePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ValidatorRulePlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              modelMethod:
                  value: "validate"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity }}Transfer"
              output:
                  value: "array"
    -   AddZedPersistencePropelSchemaProperty:
              arguments:
                  name:
                      value: "spy_{{ module | underscored }}"
                  propertyName:
                      value: "id_{{ domainEntity | underscored }}"
                  propertyType:
                      value: "INTEGER"
                  required:
                      value: "true"
                  autoIncrement:
                      value: "true"
                  primaryKey:
                    value: "true"
    # Add is_active property to "spy_{{ module }}" entity of the Persistence layer.
    -   AddZedPersistencePropelSchemaProperty:
              arguments:
                  name:
                      value: "spy_{{ module | underscored }}"
                  propertyName:
                      value: "is_active"
                  propertyType:
                      value: "BOOLEAN"
    # Add add{{ domainEntity }}DataBuilderDefinition for the tests transfer builder
    -   AddDataBuilderDefinition:
            arguments:
                name:
                    value: "{{ domainEntity }}"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}IdentifierBuilder"
              className:
                  value: "{{ domainEntity }}IdentifierBuilder"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Identifier\\{{ domainEntity }}IdentifierInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Identifier\\{{ domainEntity }}IdentifierInterface"
              subDirectory:
                  value: "{{ domainEntity }}/Identifier"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}CreateValidator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              dependencyMethods:
                  value:
                      - "get{{ domainEntity }}IdentifierBuilder"
                      - "get{{ domainEntity }}CreateValidatorRules"
                      - "get{{ domainEntity }}CreateValidatorRulePlugins"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}CreateValidatorRules"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              body:
                  value: "return [];"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}UpdateValidator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              dependencyMethods:
                  value:
                      - "get{{ domainEntity }}IdentifierBuilder"
                      - "get{{ domainEntity }}UpdateValidatorRules"
                      - "get{{ domainEntity }}UpdateValidatorRulePlugins"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}UpdateValidatorRules"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              body:
                  value: "return [];"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}ExtenderPlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_EXTENDER"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Extender\\{{ domainEntity }}ExtenderPluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PreCreatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_CREATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSaverPluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PostCreatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_CREATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSaverPluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PreUpdatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_UPDATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSaverPluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PostUpdatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_UPDATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSaverPluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}UpdateValidatorRulePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_UPDATE_VALIDATOR"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}CreateValidatorRulePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_CREATE_VALIDATOR"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"

    # Add test helper
    - AddDomainEntityTestHelper

    - AddZedDomainEntityMethod:
        arguments:
            className:
                value: "{{ domainEntity }}IdentifierBuilder"
            subDirectory:
                value: "{{ domainEntity }}/IdentifierBuilder"
            modelMethod:
                value: "buildIdentifier"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst}}Transfer"
            output:
                value: "string"
            body:
                value: "return ${{ domainEntity | lcfirst}}Transfer->getId{{ domainEntity }}();"
