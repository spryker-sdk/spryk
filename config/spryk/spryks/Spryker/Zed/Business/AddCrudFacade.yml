spryk: wrapper
description: "Adds CRUD code for a Domain Entity."
priority: 1
mode: both
level: 2

arguments:
    organization:
        inherit: true
        default: Spryker

    module:
        inherit: true

    domainEntity: ~

excludedSpryks:
    - AddZedPresentationTwig
    - AddZedNavigationNode

preSpryks:
    - AddModule

postSpryks:
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "get{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Reader()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "create{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Creator()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "update{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Updater()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "delete{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Deleter()->delete{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer);"
    - AddZedDomainEntityDeleter
    - AddZedDomainEntityCreator
    # Add add{{ domainEntity }}CreatePreSavePlugins, get{{ domainEntity }}CreatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSavePluginInterface[]"

    # Add add{{ domainEntity }}CreatePostSavePlugins, get{{ domainEntity }}CreatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePreSavePlugins, get{{ domainEntity }}UpdatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePostSavePlugins, get{{ domainEntity }}UpdatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSavePluginInterface[]"

    # Add add{{ domainEntity }}ExpanderPlugins, get{{ domainEntity }}ExpanderPlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}Expander"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Expander\\{{ domainEntity }}ExpanderPluginInterface[]"

    # Add add{{ domainEntity }}UpdateValidatorRulePlugins, get{{ domainEntity }}UpdateValidatorRulePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdateValidatorRule"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"

    # Add add{{ domainEntity }}CreateValidatorRulePlugins, get{{ domainEntity }}CreateValidatorRulePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
              arguments:
                  type:
                      value: "{{ domainEntity }}CreateValidatorRule"
                  output:
                      value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"
